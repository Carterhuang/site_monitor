####### Datacat #############

Objective:
    A tool that takes an actively written w3c formatted http log
    and generates the following output.
    
    * The section that is hit the most;
    * If traffic is beyond the threshold over two minutes, 
      print an alert message with time stamp.
    * If traffic goes back to normal, print an recovery message.

Usage:
    optional arguments:
    -h, --help         show this help message and exit
    -f [FILEPATH], --filepath [FILEPATH]
                       Specify the relative path to the http log file.
    -t [THRESHOLD], --threshold [THRESHOLD]
                       Specify the threshold for maximum number of requests
                       every two minutes that trigger the alert.

    * To see the above help message, do:
    "python main.py -h"

    * To monitor a site by having Datacat take an log file as input, do:
    "python main.py -f <input_file>"
    
    * Note: the default threshold is set to 10, which means when hits exceed
    10, it triggers a "high traffic alarm".
    To do the monitoring with a customized threshold, for example, 100, do:
    "python main.py -f <input_file> -t 100"

Terminate:
    To exit the program, do "Ctrl - C" to terminate it. The program has a 
    signal handler for that.


Log file format:
    The code is tested on the local http access file generated by the 
    local tomcat server. Please refer to the "sample_log.txt" file under 
    the same directory.

Testing:
    * Just run "python datacat_test.py".
    We set up a fake user for testing. A fake user is a thread(mock_hit_on_section) 
    that keeps writing to the input log file periodically. 

    Several parameters are set differently for mock_hit_on_section 
    for different test cases. 
    "hits" --- total number of hits generated by the fake user.
    "gap" --- the time gap in seconds between each new write to the file.
  

Components:
    "main.py" ----- the main program that initializes the entire process.
    "datacat.py" ------ the file includes the maker of Datacat objects.
    "datacat_test.py" ----- testing framework for Datacat.

Design:
    Datacat in "datacat.py" is the core of the entire tool.
    Once started (run() is called), it allowcates two threads cycling on 
    themselves. One thread is sleeps every 10 seconds and then prints the
    most popular section to be hit, the other thread loads the input file, 
    reads in any change to the file and update the "section-hit" map (a
    python dictionary with a section as key and number of hits as value).

    *** Most Popular Section:
    The most popular section is found by runing a linear scan through the
    entire "section-hit" map. An alternative is by using a heap. However,
    given that python heap does not have a proper API for 
    "decrease/increase" key, that idea is not being used.

    *** Alerting when traffic exceeds certain amount over two minutes
    For example, if the threshold is set to 100, then Datacat alerts the 
    system when hit count exceeds 100 over two minutes. Then we maintain 
    a queue (in the code, it is the variable 'event_queue') of size 100 
    at maximum, with the following format:

    event_queue = [(time0, hit0), ... (time99, hit99)]

    The first element of each tuple, time is generated by time.time(), as 
    timestamp of a hit. When event_queue hasn't reached 100 yet, Datacat
    keeps pushing new (time, hit) pair into the queue. If 100 is reached,
    then Datacat checks if (current_time - time0) is below 120 seconds. If 
    it is, then we find out that 100 hits occur within two minutes and should
    alert the system.

   
    






    






 
